//testone.cpp
#include <iostream>

using namespace std;

class Node
{
    public:
        int value;
        Node* next;
};
void delNode(Node** head, int x)
{
    Node* temporary = *head;
    Node* pre = NULL;

    if(temporary->value == x && temporary != NULL )
    {
            *head = temporary->next;
            delete temporary;
            return;
    }
    else
    {
        while(temporary!= NULL && temporary->value != x)
        {
            pre = temporary;
            temporary = temporary-> next;
        }
        if(temporary==NULL)
        {
            cout<<"not found"<<endl;
            return;
        }

        pre->next = temporary->next;
        delete temporary;
    }
}
bool searchElement(Node *head, int x)
{
    Node* now = head;
    while (now != NULL)
    {
        if (now->value == x)
            return true;
        now = now->next;
    }
    return false;
}
void PrintLinkedList(Node* n)
{
    while (n!= NULL)
    {
        cout << n->value<<endl;
        n = n->next;
    }
}
void insertAtBegin(Node** head, int newVal)
{
    Node* newNode = new Node();
    newNode->value = newVal;
    newNode->next = *head;
    *head = newNode;
}
/*void swapNode(Node** head, int x, int y)
{
    if(x == y)
        return;
    
    Node *prex = NULL;
    Node *curx = *head;

    while(curx && curx->value != x) //searching x
    {
        prex = curx;
        curx = curx->next;
    }

    Node *prey = NULL;
    Node *cury = *head;
    while (cury && cury->value != y) {
        prey = cury;
        cury = cury->next;
    }
    if (curx == NULL || cury == NULL)
        return;

    if (prex != NULL)
        prex->next = cury;
    else //making y new head
        *head = cury;
}*/

class Node* swap(Node* pt1,Node* pt2)
{
    Node* temp = pt2->next;
    pt2->next = pt1;
    pt1->next = temp;
    return pt2;
}
int bubbleSort(Node** head, int ct)
{
    Node** h;
    int swap;

    for (int i = 0; i<= ct; i++)
    {
        h = head;
        swapped = 0;
 
        for (j = 0; j < count - i - 1; j++)
        {
 
            Node* p1 = *h;
            Node* p2 = p1->next;
 
            if (p1->value > p2->value)
            {
                *h = swap(p1, p2);
                swapped = 1;
            }
 
            h = &(*h)->next;
        }
 
        if (swap == 0)
            break;
    }
}

int main()
{
    int x;
    char choice;
    int counter=0;
    Node* head = new Node();

    cout<<"enter a value: ";
    cin>>x;
    head->value = x;
    head->next = NULL;
    counter++;

    cout<<"enter new value? (y/n): ";
    cin>>choice;
    
    if(choice != 'y')
    {
        cout<<"Unsorted list: \n";
        PrintLinkedList(head);
        return 1;
    }

    do
    {
        cout<<"enter a value: ";
        cin>>x;
        insertAtBegin(&head,x);
        counter++;
        cout<<"enter new value? (y/n): ";
        cin>>choice;
    }
    while(choice == 'y');

    cout<<"Unsorted list: \n";
    PrintLinkedList(head);

    int searchkey = 0;
    cout<<"Enter Element to Search: ";
    cin>> searchkey;
    if(searchElement(head, searchkey))
    {
        cout<<"found"<<endl;
    }
    else
    {
        cout<<"not found"<<endl;
    }

    int deletekey = 0;
    cout<<"Enter Element to Delete: ";
    cin>>deletekey;
    delNode(&head, deletekey);
    cout<<"New List: "<<endl;
    PrintLinkedList(head);

    bubbleSort(&head, counter);

    cout<<"Sorted List: "<<endl;
    PrintLinkedList(head);

    return 0;
}
